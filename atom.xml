<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zephyr&#39;s Blog</title>
  
  
  <link href="https://miss698.com/atom.xml" rel="self"/>
  
  <link href="https://miss698.com/"/>
  <updated>2023-03-12T03:07:05.704Z</updated>
  <id>https://miss698.com/</id>
  
  <author>
    <name>Zephyr</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker学习笔记</title>
    <link href="https://miss698.com/posts/10048.html"/>
    <id>https://miss698.com/posts/10048.html</id>
    <published>2023-03-12T03:06:03.000Z</published>
    <updated>2023-03-12T03:07:05.704Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows操作系统的机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口</p><h3 id="Docker的优点"><a href="#Docker的优点" class="headerlink" title="Docker的优点"></a>Docker的优点</h3><ul><li>应用更快速的交付和部署</li><li>更便捷的升级和扩缩容</li><li>更简单的系统运维</li><li>更高效的计算资源利用</li></ul><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="docker的基本组成"><a href="#docker的基本组成" class="headerlink" title="docker的基本组成"></a>docker的基本组成</h3><p><img src="C:\Users\dell0\Downloads\03e39bfb64ffd63d93e4baee45358500.jpeg" alt="03e39bfb64ffd63d93e4baee45358500"></p><h4 id="镜像（image）"><a href="#镜像（image）" class="headerlink" title="镜像（image）"></a>镜像（image）</h4><p>Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</p><h4 id="容器（container）"><a href="#容器（container）" class="headerlink" title="容器（container）"></a>容器（container）</h4><p>镜像和容器的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><h4 id="仓库（repository）"><a href="#仓库（repository）" class="headerlink" title="仓库（repository）"></a>仓库（repository）</h4><p>仓库可看成一个代码控制中心，用来保存镜像。</p><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p><a href="https://docs.docker.com/">官方文档</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.卸载旧的版本</span></span><br><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.需要的安装包</span></span><br><span class="line">yum install -y yum-utils</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3.设置镜像的仓库</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo # 默认是从国外的。</span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo # 推荐使用阿里云的。</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装容器之前，更新yum软件包索引。</span></span><br><span class="line">yum makecache fast</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4.安装容器相关的。docker-ce（社区版）docker-ee（企业版）</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5.启动docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6.使用docker version查看是否安装成功</span></span><br><span class="line">docker version</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">7.测试hello-world</span></span><br><span class="line">docker run hello-world</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如何卸载docker</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.卸载依赖</span></span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.删除资源  /var/lib/docker  docker的默认工作路径</span></span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line">rm -rf /var/lib/containerd</span><br></pre></td></tr></table></figure><h3 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h3><h2 id="Docker的常用命令"><a href="#Docker的常用命令" class="headerlink" title="Docker的常用命令"></a>Docker的常用命令</h2><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version# 显示docker的版本信息</span><br><span class="line">docker info# 显示docker的系统信息，包括镜像和容器的数量</span><br><span class="line">docker --help# 帮助命令</span><br></pre></td></tr></table></figure><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker images# 查看本机上所有的镜像</span><br><span class="line">docker search# 搜索镜像</span><br><span class="line">docker pull# 下载镜像</span><br><span class="line">docker rmi# 删除镜像</span><br></pre></td></tr></table></figure><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">docker ps# 列出所有运行的容器</span><br><span class="line">docker ps -a# 列出所有容器（包括历史容器）</span><br><span class="line">docker run tomcat # 启动镜像（tomcat：镜像id或名字）</span><br><span class="line">-name=&quot;name&quot; 容器名字</span><br><span class="line">-d  后台方式运行</span><br><span class="line">-it 使用交互式运行：进入容器查看内容</span><br><span class="line">-p  指定容器的端口（四种方式）小写字母p</span><br><span class="line">docker run -it tomcat /bin/bash # 启动并进去容器内部</span><br><span class="line"></span><br><span class="line">exit # 容器直接停止，并退出</span><br><span class="line">ctrl+P+Q # 容器不停止，退出</span><br><span class="line"></span><br><span class="line">docker rm 容器id # 删除容器（不能删除正在运行的容器）如果要强制删除：docker rm -f 容器id</span><br><span class="line">docker rm -f $(docker ps -aq) # 删除全部容器</span><br><span class="line">docker ps -a -q|xargs docker rm # 删除所有容器</span><br><span class="line"></span><br><span class="line">docker start 容器id# 启动容器</span><br><span class="line">docker restart 容器id# 重启容器</span><br><span class="line">docker stop 容器id # 停止当前正在运行的容器</span><br><span class="line">docker kill 容器id # 强制停止当前容器</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Docker概述&quot;&gt;&lt;a href=&quot;#Docker概述&quot; class=&quot;headerlink&quot; title=&quot;Docker概述&quot;&gt;&lt;/a&gt;Docker概述&lt;/h2&gt;&lt;p&gt;Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜</summary>
      
    
    
    
    <category term="随笔" scheme="https://miss698.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="Docker" scheme="https://miss698.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>平面结构转换树形结构</title>
    <link href="https://miss698.com/posts/55534.html"/>
    <id>https://miss698.com/posts/55534.html</id>
    <published>2023-03-12T03:03:47.000Z</published>
    <updated>2023-03-12T03:05:01.351Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>第一个参数：根节点的条件</p></li><li><p>第二个参数：根节点和子节点的关系（注意，这地方如果条件不充分，会导致异常，无限递归）</p></li><li><p>第三个参数：当前数据添加子集</p></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 将列表转换为树形结构</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;list&quot;&gt;</span>数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;rootwhere&quot;&gt;</span>根条件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;childswhere&quot;&gt;</span>节点条件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;addchilds&quot;&gt;</span>添加子节点<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;entity&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; <span class="title">ToTree</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> List&lt;T&gt; list, Func&lt;T, T, <span class="built_in">bool</span>&gt; rootwhere, Func&lt;T, T, <span class="built_in">bool</span>&gt; childswhere, Action&lt;T, IEnumerable&lt;T&gt;&gt; addchilds, T entity = <span class="literal">default</span>(T</span>))</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> treelist = <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line">    <span class="comment">//空树</span></span><br><span class="line">    <span class="keyword">if</span> (list == <span class="literal">null</span> || list.Count == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> treelist;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!list.Any&lt;T&gt;(e =&gt; rootwhere(entity, e)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> treelist;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//树根</span></span><br><span class="line">    <span class="keyword">if</span> (list.Any&lt;T&gt;(e =&gt; rootwhere(entity, e)))</span><br><span class="line">    &#123;</span><br><span class="line">        treelist.AddRange(list.Where(e =&gt; rootwhere(entity, e)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//树叶</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> treelist)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (list.Any(e =&gt; childswhere(item, e)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> nodedata = list.Where(e =&gt; childswhere(item, e)).ToList();</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> child <span class="keyword">in</span> nodedata)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//添加子集</span></span><br><span class="line">                <span class="keyword">var</span> data = list.ToTree(childswhere, childswhere, addchilds, child);</span><br><span class="line">                addchilds(child, data);</span><br><span class="line">            &#125;</span><br><span class="line">            addchilds(item, nodedata);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> treelist;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用示例1: LevelCode</span></span><br><span class="line"><span class="keyword">var</span> treedata = list.ToTree&lt;TTest&gt;((r, c) =&gt;</span><br><span class="line">                 &#123;</span><br><span class="line">                     <span class="keyword">return</span> c.Pid == <span class="number">0</span>;</span><br><span class="line">                 &#125;,</span><br><span class="line">                (r, c) =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> r.Id == c.Pid;</span><br><span class="line">                &#125;,</span><br><span class="line">                (r, datalist) =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    r.Childs = r.Childs ?? <span class="keyword">new</span> List&lt;TTest&gt;();</span><br><span class="line">                    r.Childs.AddRange(datalist);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">调用示例2: id---&gt;pid</span><br><span class="line">treedata2 = liststr2.ToTree&lt;TTest&gt;((r, c) =&gt; c.LevelCode.Length == 6, (r, c) =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    if (r == null || c == null)</span><br><span class="line">                    &#123;</span><br><span class="line">                        return false;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if ((r.LevelCode.Length + 6 == c.LevelCode.Length) &amp;&amp;</span><br><span class="line">                        r.LevelCode == c.LevelCode.Substring(0, r.LevelCode.Length))</span><br><span class="line">                    &#123;</span><br><span class="line">                        return true;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else</span><br><span class="line">                    &#123;</span><br><span class="line">                        return false;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                (r, datalist) =&gt; &#123; </span><br><span class="line">                r.Childs = r.Childs ?? new List&lt;TTest&gt;();  </span><br><span class="line">                r.Childs.AddRange(datalist); </span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;第一个参数：根节点的条件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二个参数：根节点和子节点的关系（注意，这地方如果条件不充分，会导致异常，无限递归）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第三个参数：当前数据添加子集&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure</summary>
      
    
    
    
    <category term="C#" scheme="https://miss698.com/categories/C/"/>
    
    
    <category term="C#" scheme="https://miss698.com/tags/C/"/>
    
    <category term="后端" scheme="https://miss698.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>获取Object对象中的属性值</title>
    <link href="https://miss698.com/posts/52727.html"/>
    <id>https://miss698.com/posts/52727.html</id>
    <published>2023-03-12T03:02:39.000Z</published>
    <updated>2023-03-12T03:03:16.865Z</updated>
    
    <content type="html"><![CDATA[<p>C#是强类型语言，所以要从object对象中获取属性值，就必须要转换成实体类，如果不知道实际类型，可以使用dynamic类型来转换，dynamic让C#具有弱语言类型的特性</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">object</span> obj = <span class="keyword">new</span> &#123;</span><br><span class="line">        Name = <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">        Age = <span class="number">18</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">dynamic</span> dyName = ((<span class="built_in">dynamic</span>)obj).Name;</span><br><span class="line">    <span class="built_in">dynamic</span> dySayHi = ((<span class="built_in">dynamic</span>)obj).Age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外也可以通过反射获取属性值</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">object</span> obj = <span class="keyword">new</span> &#123;</span><br><span class="line">        Name = <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">        Age = <span class="number">18</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">string</span> Name = obj.GetType().GetProperty(<span class="string">&quot;Name&quot;</span>).GetValue(obj).ToString();</span><br><span class="line">    <span class="built_in">int</span> Age = Convert.ToInt32(obj.GetType().GetProperty(<span class="string">&quot;Age&quot;</span>).GetValue(obj));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;C#是强类型语言，所以要从object对象中获取属性值，就必须要转换成实体类，如果不知道实际类型，可以使用dynamic类型来转换，dynamic让C#具有弱语言类型的特性&lt;/p&gt;
&lt;figure class=&quot;highlight c#&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="C#" scheme="https://miss698.com/categories/C/"/>
    
    
    <category term="C#" scheme="https://miss698.com/tags/C/"/>
    
    <category term="后端" scheme="https://miss698.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>DI自动注册</title>
    <link href="https://miss698.com/posts/46919.html"/>
    <id>https://miss698.com/posts/46919.html</id>
    <published>2023-03-12T02:58:33.000Z</published>
    <updated>2023-03-12T03:00:49.507Z</updated>
    
    <content type="html"><![CDATA[<p>.net core 中每写一个服务就需要注册一次，所以在使用中使其自动注入实例，更加方便</p><h1 id="1、安装NuGet包"><a href="#1、安装NuGet包" class="headerlink" title="1、安装NuGet包"></a>1、安装NuGet包</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Microsoft.Extensions.DependencyModel</span><br><span class="line">Microsoft.Extensions.Options</span><br></pre></td></tr></table></figure><h1 id="2、新建类：RuntimeHelper、ServiceExtension"><a href="#2、新建类：RuntimeHelper、ServiceExtension" class="headerlink" title="2、新建类：RuntimeHelper、ServiceExtension"></a>2、新建类：RuntimeHelper、ServiceExtension</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RuntimeHelper</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> 获取项目程序集，排除所有的系统程序集(Microsoft.***、System.***等)、Nuget下载包</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IList&lt;Assembly&gt; <span class="title">GetAllAssemblies</span>()</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">var</span> list = <span class="keyword">new</span> List&lt;Assembly&gt;();</span><br><span class="line">           <span class="keyword">var</span> deps = DependencyContext.Default;</span><br><span class="line">           <span class="keyword">var</span> libs = deps.CompileLibraries.Where(lib =&gt; !lib.Serviceable &amp;&amp; lib.Type != <span class="string">&quot;package&quot;</span>);<span class="comment">//排除所有的系统程序集、Nuget下载包</span></span><br><span class="line">           <span class="keyword">foreach</span> (<span class="keyword">var</span> lib <span class="keyword">in</span> libs)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">try</span></span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">var</span> assembly = AssemblyLoadContext.Default.LoadFromAssemblyName(<span class="keyword">new</span> AssemblyName(lib.Name));</span><br><span class="line">                   list.Add(assembly);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">catch</span> (Exception)</span><br><span class="line">               &#123;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> list;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Assembly <span class="title">GetAssembly</span>(<span class="params"><span class="built_in">string</span> assemblyName</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> GetAllAssemblies().FirstOrDefault(assembly =&gt; assembly.FullName.Contains(assemblyName));</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IList&lt;Type&gt; <span class="title">GetAllTypes</span>()</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">var</span> list = <span class="keyword">new</span> List&lt;Type&gt;();</span><br><span class="line">           <span class="keyword">foreach</span> (<span class="function"><span class="keyword">var</span> assembly <span class="keyword">in</span> <span class="title">GetAllAssemblies</span>())</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">var</span> typeInfos = assembly.DefinedTypes;</span><br><span class="line">               <span class="keyword">foreach</span> (<span class="keyword">var</span> typeInfo <span class="keyword">in</span> typeInfos)</span><br><span class="line">               &#123;</span><br><span class="line">                   list.Add(typeInfo.AsType());</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> list;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IList&lt;Type&gt; <span class="title">GetTypesByAssembly</span>(<span class="params"><span class="built_in">string</span> assemblyName</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">var</span> list = <span class="keyword">new</span> List&lt;Type&gt;();</span><br><span class="line">           <span class="keyword">var</span> assembly = AssemblyLoadContext.Default.LoadFromAssemblyName(<span class="keyword">new</span> AssemblyName(assemblyName));</span><br><span class="line">           <span class="keyword">var</span> typeInfos = assembly.DefinedTypes;</span><br><span class="line">           <span class="keyword">foreach</span> (<span class="keyword">var</span> typeInfo <span class="keyword">in</span> typeInfos)</span><br><span class="line">           &#123;</span><br><span class="line">               list.Add(typeInfo.AsType());</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> list;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Type <span class="title">GetImplementType</span>(<span class="params"><span class="built_in">string</span> typeName, Type baseInterfaceType</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> GetAllTypes().FirstOrDefault(t =&gt;</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span> (t.Name == typeName &amp;&amp;</span><br><span class="line">                   t.GetTypeInfo().GetInterfaces().Any(b =&gt; b.Name == baseInterfaceType.Name))</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">var</span> typeInfo = t.GetTypeInfo();</span><br><span class="line">                   <span class="keyword">return</span> typeInfo.IsClass &amp;&amp; !typeInfo.IsAbstract;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> IServiceCollection扩展</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ServiceExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 注册服务</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;services&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;interfaceAssemblyName&quot;&gt;</span>定义业务接口的程序集名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;implementAssemblyName&quot;&gt;</span>实现业务接口的程序集名称(默认 interfaceAssemblyName)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterService</span>(<span class="params"><span class="keyword">this</span> IServiceCollection service, <span class="built_in">string</span> interfaceAssemblyName, <span class="built_in">string</span> implementAssemblyName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(implementAssemblyName))</span><br><span class="line">        &#123;</span><br><span class="line">            RegisterAssembly(service, interfaceAssemblyName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            RegisterAssembly(service, interfaceAssemblyName, implementAssemblyName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 批量注入接口程序集中对应的实现类。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 需要注意的是，这里有如下约定：</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> IUserService <span class="doctag">--&gt;</span> UserService, IUserRepository <span class="doctag">--&gt;</span> UserRepository.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;service&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;interfaceAssemblyName&quot;&gt;</span>接口程序集的名称（不包含文件扩展名）<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> IServiceCollection <span class="title">RegisterAssembly</span>(<span class="params"><span class="keyword">this</span> IServiceCollection service, <span class="built_in">string</span> interfaceAssemblyName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (service == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(service));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(interfaceAssemblyName))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(interfaceAssemblyName));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> assembly = RuntimeHelper.GetAssembly(interfaceAssemblyName);</span><br><span class="line">        <span class="keyword">if</span> (assembly == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DllNotFoundException(<span class="string">$&quot;the dll \&quot;<span class="subst">&#123;interfaceAssemblyName&#125;</span>\&quot; not be found&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//过滤掉非接口及泛型接口</span></span><br><span class="line">        <span class="keyword">var</span> types = assembly.GetTypes().Where(t =&gt; t.GetTypeInfo().IsInterface);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> type <span class="keyword">in</span> types)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> implementTypeName = type.Name.Substring(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">var</span> implementType = RuntimeHelper.GetImplementType(implementTypeName, type);</span><br><span class="line">            <span class="keyword">if</span> (implementType != <span class="literal">null</span>)</span><br><span class="line">                service.AddScoped(type, implementType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 用DI批量注入接口程序集中对应的实现类。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;service&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;interfaceAssemblyName&quot;&gt;</span>接口程序集的名称（不包含文件扩展名）<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;implementAssemblyName&quot;&gt;</span>实现程序集的名称（不包含文件扩展名）<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> IServiceCollection <span class="title">RegisterAssembly</span>(<span class="params"><span class="keyword">this</span> IServiceCollection service, <span class="built_in">string</span> interfaceAssemblyName, <span class="built_in">string</span> implementAssemblyName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (service == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(service));</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(interfaceAssemblyName))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(interfaceAssemblyName));</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(implementAssemblyName))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(implementAssemblyName));</span><br><span class="line">        <span class="keyword">var</span> interfaceAssembly = RuntimeHelper.GetAssembly(interfaceAssemblyName);</span><br><span class="line">        <span class="keyword">if</span> (interfaceAssembly == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DllNotFoundException(<span class="string">$&quot;the dll \&quot;<span class="subst">&#123;interfaceAssemblyName&#125;</span>\&quot; not be found&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> implementAssembly = RuntimeHelper.GetAssembly(implementAssemblyName);</span><br><span class="line">        <span class="keyword">if</span> (implementAssembly == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DllNotFoundException(<span class="string">$&quot;the dll \&quot;<span class="subst">&#123;implementAssemblyName&#125;</span>\&quot; not be found&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//过滤掉非接口及泛型接口</span></span><br><span class="line">        <span class="keyword">var</span> types = interfaceAssembly.GetTypes().Where(t =&gt; t.GetTypeInfo().IsInterface);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> type <span class="keyword">in</span> types)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//过滤掉抽象类、泛型类以及非class</span></span><br><span class="line">            <span class="keyword">var</span> implementType = implementAssembly.DefinedTypes</span><br><span class="line">                .FirstOrDefault(t =&gt; t.IsClass &amp;&amp; !t.IsAbstract &amp;&amp;</span><br><span class="line">                                     t.GetInterfaces().Any(b =&gt; b.Name == type.Name));</span><br><span class="line">            <span class="keyword">if</span> (implementType != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                service.AddScoped(type, implementType.AsType());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、在Program-cs中注册"><a href="#3、在Program-cs中注册" class="headerlink" title="3、在Program.cs中注册"></a>3、在Program.cs中注册</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">builder.Services.RegisterService(<span class="string">&quot;lzf.Common&quot;</span>, <span class="built_in">string</span>.Empty);</span><br><span class="line">builder.Services.RegisterService(<span class="string">&quot;lzf.Service&quot;</span>, <span class="built_in">string</span>.Empty);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;.net core 中每写一个服务就需要注册一次，所以在使用中使其自动注入实例，更加方便&lt;/p&gt;
&lt;h1 id=&quot;1、安装NuGet包&quot;&gt;&lt;a href=&quot;#1、安装NuGet包&quot; class=&quot;headerlink&quot; title=&quot;1、安装NuGet包&quot;&gt;&lt;/a&gt;1、安装</summary>
      
    
    
    
    <category term="C#" scheme="https://miss698.com/categories/C/"/>
    
    
    <category term="C#" scheme="https://miss698.com/tags/C/"/>
    
    <category term="后端" scheme="https://miss698.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>EFCore批量操作</title>
    <link href="https://miss698.com/posts/42416.html"/>
    <id>https://miss698.com/posts/42416.html</id>
    <published>2023-03-12T02:46:16.000Z</published>
    <updated>2023-03-12T02:57:50.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EFCore-批量操作"><a href="#EFCore-批量操作" class="headerlink" title="EFCore 批量操作"></a>EFCore 批量操作</h1><p>目前在EFCore中的，批量更新和删除数据都要先把数据加载到内存中，然后再对数据操作，最后再SaveChanges</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h4 id="1-使用原始SQL执行，EFCore中提供了context-Database-ExecuteSqlRaw-等方法"><a href="#1-使用原始SQL执行，EFCore中提供了context-Database-ExecuteSqlRaw-等方法" class="headerlink" title="1. 使用原始SQL执行，EFCore中提供了context.Database.ExecuteSqlRaw()等方法"></a>1. 使用原始SQL执行，EFCore中提供了context.Database.ExecuteSqlRaw()等方法</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.Database.ExecuteSqlRaw(<span class="string">&quot;UPDATE [Employees] SET [Salary] = [Salary] + 1000&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="2-使用其他ORM，例如FreeSQL，SQLSugar等提供了批量操作的方法"><a href="#2-使用其他ORM，例如FreeSQL，SQLSugar等提供了批量操作的方法" class="headerlink" title="2. 使用其他ORM，例如FreeSQL，SQLSugar等提供了批量操作的方法"></a>2. 使用其他ORM，例如FreeSQL，SQLSugar等提供了批量操作的方法</h4><h4 id="3-使用EFCore扩展，EF-Plus、EFCore-BulkExtensions等开源库中提供了在EFCore下进行批量操作的方法"><a href="#3-使用EFCore扩展，EF-Plus、EFCore-BulkExtensions等开源库中提供了在EFCore下进行批量操作的方法" class="headerlink" title="3. 使用EFCore扩展，EF Plus、EFCore.BulkExtensions等开源库中提供了在EFCore下进行批量操作的方法"></a>3. 使用EFCore扩展，EF Plus、EFCore.BulkExtensions等开源库中提供了在EFCore下进行批量操作的方法</h4><h5 id="3-1-先安装Nuget包"><a href="#3-1-先安装Nuget包" class="headerlink" title="3.1 先安装Nuget包"></a>3.1 先安装Nuget包</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Package EFCore.BulkExtensions</span><br></pre></td></tr></table></figure><h5 id="3-2-使用扩展方法进行批量操作"><a href="#3-2-使用扩展方法进行批量操作" class="headerlink" title="3.2 使用扩展方法进行批量操作"></a>3.2 使用扩展方法进行批量操作</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 都有对应的异步方法</span></span><br><span class="line">context.BulkInsert(entities);</span><br><span class="line">context.BulkUpdate(entities); </span><br><span class="line">context.BulkDelete(entities);</span><br><span class="line">context.BulkInsertOrUpdate(entities);  </span><br><span class="line">context.BulkInsertOrUpdateOrDelete(entities);</span><br><span class="line">context.BulkRead(entities);</span><br><span class="line">context.BulkSaveChanges(); </span><br></pre></td></tr></table></figure><blockquote><p>MySQL默认关闭LocalInfile，需要在连接字符串加上 AllowLoadLocalInfile&#x3D;true;</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;EFCore-批量操作&quot;&gt;&lt;a href=&quot;#EFCore-批量操作&quot; class=&quot;headerlink&quot; title=&quot;EFCore 批量操作&quot;&gt;&lt;/a&gt;EFCore 批量操作&lt;/h1&gt;&lt;p&gt;目前在EFCore中的，批量更新和删除数据都要先把数据加载到内存中，</summary>
      
    
    
    
    <category term="C#" scheme="https://miss698.com/categories/C/"/>
    
    
    <category term="C#" scheme="https://miss698.com/tags/C/"/>
    
    <category term="后端" scheme="https://miss698.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Entity Framework Core" scheme="https://miss698.com/tags/Entity-Framework-Core/"/>
    
  </entry>
  
  <entry>
    <title>在服务端配置跨域</title>
    <link href="https://miss698.com/posts/1035.html"/>
    <id>https://miss698.com/posts/1035.html</id>
    <published>2023-02-03T07:08:57.000Z</published>
    <updated>2023-02-03T07:24:55.338Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>📝 开发前后端分离项目时，两个项目是分别部署，一般情况下，当客户端向服务端发送请求时，浏览器会制止向另一个站点读取数据，此限制称为同域策略，因此需要在服务端项目中启用跨域请求（CORS）</p></blockquote><blockquote><p>✒ 当前开发环境：ASP.NET Core Web API 6.0</p></blockquote><hr><h2 id="添加跨域策略"><a href="#添加跨域策略" class="headerlink" title="添加跨域策略"></a>添加跨域策略</h2><p>只需要在 Program.cs 文件中添加一下跨域服务，如下</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只需要两句代码就可以简单配置</span></span><br><span class="line"><span class="comment">// AllowAnyOrigin(): 允许任何站点发出的跨域请求</span></span><br><span class="line"><span class="comment">// AllowAnyHeader(): 允许任何的请求头</span></span><br><span class="line"><span class="comment">// AllowAnyMethod(): 允许任何HTTP方法</span></span><br><span class="line">builder.Services.AddCors(options =&gt; options.AddPolicy(<span class="string">&quot;cors&quot;</span>,p =&gt; p.AllowAnyOrigin().AllowAnyHeader().AllowAnyMethod()));</span><br><span class="line">app.UseCors(<span class="string">&quot;cors&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置AllowAnyOrigin后任何网站都可以向应用发出跨域请求，会使其不安全</span></span><br><span class="line"><span class="comment">// 所以可以手动添加站点，可以设置多个站点，逗号隔开</span></span><br><span class="line"><span class="comment">// 同时也可手动添加允许的请求头</span></span><br><span class="line">builder.Services.AddCors(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.AddPolicy(<span class="string">&quot;cors&quot;</span>, p =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        p.WithOrigins(<span class="string">&quot;http://example.com&quot;</span>)</span><br><span class="line">            .WithHeaders(HeaderNames.ContentType, <span class="string">&quot;x-custom-header&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.UseCors(<span class="string">&quot;cors&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这就是跨域处理的基本操作，如果需要深入了解CORS，可以看<a href="https://learn.microsoft.com/zh-cn/aspnet/core/security/cors?view=aspnetcore-6.0">微软文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;📝 开发前后端分离项目时，两个项目是分别部署，一般情况下，当客户端向服务端发送请求时，浏览器会制止向另一个站点读取数据，此限制称为同域策略，因此需要在服务端项目中启用跨域请求（CORS）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote</summary>
      
    
    
    
    <category term="C#" scheme="https://miss698.com/categories/C/"/>
    
    
    <category term="C#" scheme="https://miss698.com/tags/C/"/>
    
    <category term="后端" scheme="https://miss698.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="跨域" scheme="https://miss698.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://miss698.com/posts/16107.html"/>
    <id>https://miss698.com/posts/16107.html</id>
    <published>2023-01-30T06:04:39.031Z</published>
    <updated>2023-01-30T08:07:19.577Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
